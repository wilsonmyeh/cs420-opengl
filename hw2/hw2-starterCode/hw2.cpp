/*
  CSCI 420 Computer Graphics, USC
  Assignment 2: Roller Coaster
  C++ starter code

  Student username: <wilsonye>
*/

#include <iostream>
#include <cstring>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <vector>

#include "openGLHeader.h"
#include "glutHeader.h"

#include "imageIO.h"
#include "openGLMatrix.h"
#include "basicPipelineProgram.h"

#ifdef WIN32
  #ifdef _DEBUG
    #pragma comment(lib, "glew32d.lib")
  #else
    #pragma comment(lib, "glew32.lib")
  #endif
#endif

#ifdef WIN32
  char shaderBasePath[1024] = SHADER_BASE_PATH;
#else
  char shaderBasePath[1024] = "../openGLHelper-starterCode";
#endif

using namespace std;

// represents one control point along the spline 
struct Point
{
	double x;
	double y;
	double z;
};

// spline struct 
// contains how many control points the spline has, and an array of control points 
struct Spline
{
	int numControlPoints;
	Point * points;
};

int mousePos[2]; // x,y coordinate of the mouse position

int leftMouseButton = 0; // 1 if pressed, 0 if not 
int middleMouseButton = 0; // 1 if pressed, 0 if not
int rightMouseButton = 0; // 1 if pressed, 0 if not

typedef enum { ROTATE, TRANSLATE, SCALE } CONTROL_STATE;
CONTROL_STATE controlState = ROTATE;

// state of the world
float landRotate[3] = { 0.0f, 0.0f, 0.0f };
float landTranslate[3] = { 0.0f, 0.0f, 0.0f };
float landScale[3] = { 1.0f, 1.0f, 1.0f };

struct CameraState
{
	CameraState(glm::vec3 p, glm::vec3 t, glm::vec3 n) : point(p), tangent(t), normal(n) {}
	glm::vec3 point;
	glm::vec3 tangent;
	glm::vec3 normal;
};
vector<CameraState> ride;
unsigned int rideFrame;
unsigned int velocity;

int windowWidth = 1280;
int windowHeight = 720;
char windowTitle[512] = "CSCI 420 homework I";

bool recording;
bool secondFrame;
int frameNum;

char renderType;
OpenGLMatrix *matrix;

GLuint splineBuffer;
GLuint groundBuffer;
GLuint skyBuffer;

GLuint splineTexHandle;
GLuint groundTexHandle;
GLuint skyTexHandle;


// Shader and uniform variables
BasicPipelineProgram *pipelineProgram;
GLint program;
GLint h_modelViewMatrix, h_projectionMatrix;

GLuint splinevao;
GLuint groundvao;
GLuint skyvao;

// Vertices
int splineNumVertices;
vector<float> splinepos;
vector<float> splineuvs;

int groundNumVertices;
vector<float> groundpos;
vector<float> grounduvs;

int skyNumVertices;
vector<float> skypos;
vector<float> skyuvs;

// the spline array 
Spline * splines;
// total number of splines 
int numSplines;

// write a screenshot to the specified filename
void saveScreenshot(const char * filename)
{
  unsigned char * screenshotData = new unsigned char[windowWidth * windowHeight * 3];
  glReadPixels(0, 0, windowWidth, windowHeight, GL_RGB, GL_UNSIGNED_BYTE, screenshotData);

  ImageIO screenshotImg(windowWidth, windowHeight, 3, screenshotData);

  if (screenshotImg.save(filename, ImageIO::FORMAT_JPEG) == ImageIO::OK)
    cout << "File " << filename << " saved successfully." << endl;
  else cout << "Failed to save file " << filename << '.' << endl;

  delete [] screenshotData;
}

void setTextureUnit(GLint unit)
{
	glActiveTexture(unit); // select the active texture unit
	// get a handle to the “textureImage” shader variable
	GLint h_textureImage = glGetUniformLocation(program, "textureImage");
	// deem the shader variable “textureImage” to read from texture unit “unit”
	glUniform1i(h_textureImage, unit - GL_TEXTURE0);
}

void drawObject(int numVertices, GLuint vao, GLuint texHandle, GLuint drawType)
{
	// select the active texture unit
	setTextureUnit(GL_TEXTURE0); // it is safe to always use GL_TEXTURE0
	glBindTexture(GL_TEXTURE_2D, texHandle); // select the texture to use (“texHandle” was generated by glGenTextures)

	glBindVertexArray(vao); // bind the VAO
	GLint first = 0;
	GLsizei count = numVertices;
	glDrawArrays(drawType, first, count);
	glBindVertexArray(0); // unbind the VAO
}

void displayFunc()
{
  // render some stuff...
	glClear(GL_COLOR_BUFFER_BIT |
		GL_DEPTH_BUFFER_BIT);

	// Compute the ModelView matrix
	matrix->SetMatrixMode(OpenGLMatrix::ModelView);
	matrix->LoadIdentity();
	matrix->LookAt( ride[rideFrame].point.x + ride[rideFrame].normal.x - 2*ride[rideFrame].tangent.x,
					ride[rideFrame].point.y + ride[rideFrame].normal.y - 2*ride[rideFrame].tangent.y,
					ride[rideFrame].point.z + ride[rideFrame].normal.z - 2*ride[rideFrame].tangent.y,
					ride[rideFrame].point.x + 0.5*ride[rideFrame].normal.x + ride[rideFrame].tangent.x,
					ride[rideFrame].point.y + 0.5*ride[rideFrame].normal.y + ride[rideFrame].tangent.y,
					ride[rideFrame].point.z + 0.5*ride[rideFrame].normal.z + ride[rideFrame].tangent.z,
					ride[rideFrame].normal.x, ride[rideFrame].normal.y, ride[rideFrame].normal.z);
	matrix->Rotate(landRotate[0], 1.0, 0.0, 0.0);
	matrix->Rotate(landRotate[1], 0.0, 1.0, 0.0);
	matrix->Rotate(landRotate[2], 0.0, 0.0, 1.0);
	matrix->Translate(landTranslate[0], landTranslate[1], landTranslate[2]);
	matrix->Scale(landScale[0], landScale[1], landScale[2]);

	pipelineProgram->Bind(); // bind the pipeline program, must do once before glUniformMatrix4fv

	// write projection and modelview matrix to shader
	GLboolean isRowMajor = GL_FALSE;

	float m[16]; // column-major
	matrix->GetMatrix(m);
	// upload m to the GPU
	glUniformMatrix4fv(h_modelViewMatrix, 1, isRowMajor, m);

	float p[16]; // column-major
	matrix->SetMatrixMode(OpenGLMatrix::Projection);
	matrix->GetMatrix(p);
	// upload p to the GPU
	glUniformMatrix4fv(h_projectionMatrix, 1, isRowMajor, p);
	matrix->SetMatrixMode(OpenGLMatrix::ModelView);

	drawObject(splineNumVertices, splinevao, splineTexHandle, GL_TRIANGLES);
	drawObject(groundNumVertices, groundvao, groundTexHandle, GL_TRIANGLES);
	drawObject(skyNumVertices, skyvao, skyTexHandle, GL_TRIANGLES);

	glutSwapBuffers();
}

void idleFunc()
{
  // play the ride
  secondFrame = !secondFrame;
  if (rideFrame < ride.size() - 1) {
	  rideFrame += velocity - ride[rideFrame].point.z + 3;
	  if (rideFrame >= ride.size() - 1) {
		  rideFrame = ride.size() - 1;
	  }
  }
  // for example, here, you can save the screenshots to disk (to make the animation)
  // Check if recording, capture every other frame (30 fps)
  if (recording && secondFrame) {
	// Pad zeros to filename
	std::string filename = std::to_string(frameNum) + ".jpg";
	if (frameNum < 100) {
		filename = "0" + filename;
	}
	if (frameNum < 10) {
		filename = "0" + filename;
	}
	filename = "Recording/" + filename;
	saveScreenshot(filename.c_str());
	++frameNum;
  }

  // make the screen update 
  glutPostRedisplay();
}

void reshapeFunc(int w, int h)
{
  GLfloat aspect = (GLfloat)w / (GLfloat)h;
  glViewport(0, 0, w, h);

  // setup perspective matrix...
  matrix->SetMatrixMode(OpenGLMatrix::Projection);
  matrix->LoadIdentity();
  matrix->Perspective(15.0f, aspect, 0.01f, 10000.0f);
  matrix->SetMatrixMode(OpenGLMatrix::ModelView);
  matrix->LoadIdentity();
}

void mouseMotionDragFunc(int x, int y)
{
  // mouse has moved and one of the mouse buttons is pressed (dragging)

  // the change in mouse position since the last invocation of this function
  int mousePosDelta[2] = { x - mousePos[0], y - mousePos[1] };

  switch (controlState)
  {
    // translate the landscape
    case TRANSLATE:
      if (leftMouseButton)
      {
        // control x,y translation via the left mouse button
        landTranslate[0] += mousePosDelta[0] * 0.2f;
        landTranslate[1] -= mousePosDelta[1] * 0.2f;
      }
      if (rightMouseButton)
      {
        // control z translation via the middle mouse button
        landTranslate[2] += mousePosDelta[1] * 0.2f;
      }
      break;

    // rotate the landscape
    case ROTATE:
      if (leftMouseButton)
      {
        // control x,y rotation via the left mouse button
        landRotate[0] += mousePosDelta[1];
        landRotate[1] += mousePosDelta[0];
      }
      if (rightMouseButton)
      {
        // control z rotation via the middle mouse button
        landRotate[2] += mousePosDelta[1];
      }
      break;

    // scale the landscape
    case SCALE:
      if (leftMouseButton)
      {
        // control x,y scaling via the left mouse button
        landScale[0] *= 1.0f + mousePosDelta[0] * 0.01f;
        landScale[1] *= 1.0f - mousePosDelta[1] * 0.01f;
      }
      if (rightMouseButton)
      {
        // control z scaling via the middle mouse button
        landScale[2] *= 1.0f - mousePosDelta[1] * 0.01f;
      }
      break;
  }

  // store the new mouse position
  mousePos[0] = x;
  mousePos[1] = y;
}

void mouseMotionFunc(int x, int y)
{
  // mouse has moved
  // store the new mouse position
  mousePos[0] = x;
  mousePos[1] = y;
}

void mouseButtonFunc(int button, int state, int x, int y)
{
  // a mouse button has has been pressed or depressed

  // keep track of the mouse button state, in leftMouseButton, middleMouseButton, rightMouseButton variables
  switch (button)
  {
    case GLUT_LEFT_BUTTON:
      leftMouseButton = (state == GLUT_DOWN);
    break;

    case GLUT_MIDDLE_BUTTON:
      middleMouseButton = (state == GLUT_DOWN);
    break;

    case GLUT_RIGHT_BUTTON:
      rightMouseButton = (state == GLUT_DOWN);
    break;
  }

  // keep track of whether CTRL and SHIFT keys are pressed
  switch (glutGetModifiers())
  {
    case GLUT_ACTIVE_CTRL:
      controlState = TRANSLATE;
    break;

    case GLUT_ACTIVE_SHIFT:
      controlState = SCALE;
    break;

    // if CTRL and SHIFT are not pressed, we are in rotate mode
    default:
      controlState = ROTATE;
    break;
  }

  // store the new mouse position
  mousePos[0] = x;
  mousePos[1] = y;
}

void keyboardFunc(unsigned char key, int x, int y)
{
  switch (key)
  {
    case 27: // ESC key
      exit(0); // exit the program
    break;

    case ' ':
	  if (recording) {
		  cout << "Stopped recording." << endl;
	  }
	  else {
		  cout << "Started recording..." << endl;
	  }
	  recording = !recording;
    break;

    case 'x':
      // take a screenshot
      saveScreenshot("screenshot.jpg");
    break;
  }
}

int loadSplines(char * argv)
{
	char * cName = (char *)malloc(128 * sizeof(char));
	FILE * fileList;
	FILE * fileSpline;
	int iType, i = 0, j, iLength;

	// load the track file 
	fileList = fopen(argv, "r");
	if (fileList == NULL)
	{
		printf("can't open file\n");
		exit(1);
	}

	// stores the number of splines in a global variable 
	fscanf(fileList, "%d", &numSplines);

	splines = (Spline*)malloc(numSplines * sizeof(Spline));

	// reads through the spline files 
	for (j = 0; j < numSplines; j++)
	{
		i = 0;
		fscanf(fileList, "%s", cName);
		fileSpline = fopen(cName, "r");

		if (fileSpline == NULL)
		{
			printf("can't open file\n");
			exit(1);
		}

		// gets length for spline file
		fscanf(fileSpline, "%d %d", &iLength, &iType);

		// allocate memory for all the points
		splines[j].points = (Point *)malloc(iLength * sizeof(Point));
		splines[j].numControlPoints = iLength;

		// saves the data to the struct
		while (fscanf(fileSpline, "%lf %lf %lf",
			&splines[j].points[i].x,
			&splines[j].points[i].y,
			&splines[j].points[i].z) != EOF)
		{
			i++;
		}
	}

	free(cName);

	return 0;
}

int initTexture(const char * imageFilename, GLuint & textureHandle)
{
	// read the texture image
	ImageIO img;
	ImageIO::fileFormatType imgFormat;
	ImageIO::errorType err = img.load(imageFilename, &imgFormat);

	if (err != ImageIO::OK)
	{
		printf("Loading texture from %s failed.\n", imageFilename);
		return -1;
	}

	// check that the number of bytes is a multiple of 4
	if (img.getWidth() * img.getBytesPerPixel() % 4)
	{
		printf("Error (%s): The width*numChannels in the loaded image must be a multiple of 4.\n", imageFilename);
		return -1;
	}

	// allocate space for an array of pixels
	int width = img.getWidth();
	int height = img.getHeight();
	unsigned char * pixelsRGBA = new unsigned char[4 * width * height]; // we will use 4 bytes per pixel, i.e., RGBA

																		// fill the pixelsRGBA array with the image pixels
	memset(pixelsRGBA, 0, 4 * width * height); // set all bytes to 0
	for (int h = 0; h < height; h++)
		for (int w = 0; w < width; w++)
		{
			// assign some default byte values (for the case where img.getBytesPerPixel() < 4)
			pixelsRGBA[4 * (h * width + w) + 0] = 0; // red
			pixelsRGBA[4 * (h * width + w) + 1] = 0; // green
			pixelsRGBA[4 * (h * width + w) + 2] = 0; // blue
			pixelsRGBA[4 * (h * width + w) + 3] = 255; // alpha channel; fully opaque

													   // set the RGBA channels, based on the loaded image
			int numChannels = img.getBytesPerPixel();
			for (int c = 0; c < numChannels; c++) // only set as many channels as are available in the loaded image; the rest get the default value
				pixelsRGBA[4 * (h * width + w) + c] = img.getPixel(w, h, c);
		}

	// create integer handle for the texture
	glGenTextures(1, &textureHandle);

	// bind the texture
	glBindTexture(GL_TEXTURE_2D, textureHandle);

	// initialize the texture
	glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA8, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, pixelsRGBA);

	// generate the mipmaps for this texture
	glGenerateMipmap(GL_TEXTURE_2D);

	// set the texture parameters
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	// query support for anisotropic texture filtering
	GLfloat fLargest;
	glGetFloatv(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, &fLargest);
	printf("Max available anisotropic samples: %f\n", fLargest);
	// set anisotropic texture filtering
	glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, 0.5f * fLargest);

	// query for any errors
	GLenum errCode = glGetError();
	if (errCode != 0)
	{
		printf("Texture initialization error. Error code: %d.\n", errCode);
		return -1;
	}

	// de-allocate the pixel array -- it is no longer needed
	delete[] pixelsRGBA;

	return 0;
}

void initVAO(GLuint & vao, GLuint buffer, vector<float> & pos)
{
	glGenVertexArrays(1, &vao); // create the vao (integer handler)
	glBindVertexArray(vao); // bind the VAO

	glBindBuffer(GL_ARRAY_BUFFER, buffer); // bind the VBO “buffer” (must be previously created)
	// get location index of the “position” shader variable
	GLuint loc = glGetAttribLocation(program, "position");
	glEnableVertexAttribArray(loc); // enable the “position” attribute
	const void * offset = (const void*)0;
	GLsizei stride = 0;
	GLboolean normalized = GL_FALSE;
	// set the layout of the “position” attribute data
	glVertexAttribPointer(loc, 3, GL_FLOAT, normalized, stride, offset);

	// get location index of the “texCoord” shader variable
	loc = glGetAttribLocation(program, "texCoord");
	glEnableVertexAttribArray(loc); // enable the “texCoord” attribute
									// set the layout of the “texCoord” attribute data
	offset = (const void*) (sizeof(float) * pos.size());
	stride = 0;
	glVertexAttribPointer(loc, 2, GL_FLOAT, GL_FALSE, stride, offset);

	glBindVertexArray(0); // unbind the VAO
}

void initPipelineProgram()
{
	// Points
	pipelineProgram = new BasicPipelineProgram();
	pipelineProgram->Init("../openGLHelper-starterCode");
	pipelineProgram->Bind();

	// get a handle to the program
	program = pipelineProgram->GetProgramHandle();

	// initialize uniform variable handles
	// get a handle to the modelViewMatrix shader variable
	h_modelViewMatrix = glGetUniformLocation(program, "modelViewMatrix");

	// do the same for the projectionMatrix
	h_projectionMatrix = glGetUniformLocation(program, "projectionMatrix");
}

void initVBO(GLuint & buffer, vector<float> & pos, vector<float> & uvs)
{
	glGenBuffers(1, &buffer); // create integer handle for the vbo buffer
	glBindBuffer(GL_ARRAY_BUFFER, buffer); // bind the buffer
	glBufferData(GL_ARRAY_BUFFER, (pos.size() + uvs.size()) * sizeof(float),
		NULL, GL_STATIC_DRAW); // init buffer’s size, but don’t assign any data
							   // upload position data
	glBufferSubData(GL_ARRAY_BUFFER, 0,
		pos.size() * sizeof(float), pos.data());
	// upload uv data
	glBufferSubData(GL_ARRAY_BUFFER, pos.size() * sizeof(float),
		uvs.size() * sizeof(float), uvs.data());
}

void addTriangle(vector<float> & pos, vector<float> & uvs, float posA[3], float posB[3], float posC[3],
	float uvA[2], float uvB[2], float uvC[2])
{
	pos.push_back(posA[0]); pos.push_back(posA[1]); pos.push_back(posA[2]);
	pos.push_back(posB[0]); pos.push_back(posB[1]); pos.push_back(posB[2]);
	pos.push_back(posC[0]); pos.push_back(posC[1]); pos.push_back(posC[2]);
	uvs.push_back(uvA[0]); uvs.push_back(uvA[1]);
	uvs.push_back(uvB[0]); uvs.push_back(uvB[1]);
	uvs.push_back(uvC[0]); uvs.push_back(uvC[1]);
}

void createRailSegment( vector<float> & pos, vector<float> & uvs,
						glm::vec3 point0, glm::vec3 normal0, glm::vec3 binormal0,
						glm::vec3 point, glm::vec3 normal, glm::vec3 binormal) {
	normal0 = 0.25f * normal0;
	binormal0 = 0.25f * binormal0;
	normal = 0.25f * normal;
	binormal = 0.25f * normal;
	// Top
	pos.push_back(point0.x + normal0[0] - binormal0[0]);
	pos.push_back(point0.y + normal0[1] - binormal0[1]);
	pos.push_back(point0.z + normal0[2] - binormal0[2]);
	uvs.push_back(point0.x + normal0[0] - binormal0[0]);
	uvs.push_back(point0.y + normal0[1] - binormal0[1]);

	pos.push_back(point0.x + normal0[0] + binormal0[0]);
	pos.push_back(point0.y + normal0[1] + binormal0[1]);
	pos.push_back(point0.z + normal0[2] + binormal0[2]);
	uvs.push_back(point0.x + normal0[0] + binormal0[0]);
	uvs.push_back(point0.y + normal0[1] + binormal0[1]);

	pos.push_back(point.x + normal[0] + binormal[0]);
	pos.push_back(point.y + normal[1] + binormal[1]);
	pos.push_back(point.z + normal[2] + binormal[2]);
	uvs.push_back(point.x + normal[0] + binormal[0]);
	uvs.push_back(point.y + normal[1] + binormal[1]);

	pos.push_back(point0.x + normal0[0] - binormal0[0]);
	pos.push_back(point0.y + normal0[1] - binormal0[1]);
	pos.push_back(point0.z + normal0[2] - binormal0[2]);
	uvs.push_back(point0.x + normal0[0] - binormal0[0]);
	uvs.push_back(point0.y + normal0[1] - binormal0[1]);

	pos.push_back(point.x + normal[0] + binormal[0]);
	pos.push_back(point.y + normal[1] + binormal[1]);
	pos.push_back(point.z + normal[2] + binormal[2]);
	uvs.push_back(point.x + normal[0] + binormal[0]);
	uvs.push_back(point.y + normal[1] + binormal[1]);

	pos.push_back(point.x + normal[0] - binormal[0]);
	pos.push_back(point.y + normal[1] - binormal[1]);
	pos.push_back(point.z + normal[2] - binormal[2]);
	uvs.push_back(point.x + normal[0] - binormal[0]);
	uvs.push_back(point.y + normal[1] - binormal[1]);

	// Bottom
	pos.push_back(point0.x - normal0[0] - binormal0[0]);
	pos.push_back(point0.y - normal0[1] - binormal0[1]);
	pos.push_back(point0.z - normal0[2] - binormal0[2]);
	uvs.push_back(point0.x - normal0[0] - binormal0[0]);
	uvs.push_back(point0.y - normal0[1] - binormal0[1]);

	pos.push_back(point0.x - normal0[0] + binormal0[0]);
	pos.push_back(point0.y - normal0[1] + binormal0[1]);
	pos.push_back(point0.z - normal0[2] + binormal0[2]);
	uvs.push_back(point0.x - normal0[0] + binormal0[0]);
	uvs.push_back(point0.y - normal0[1] + binormal0[1]);

	pos.push_back(point.x - normal[0] + binormal[0]);
	pos.push_back(point.y - normal[1] + binormal[1]);
	pos.push_back(point.z - normal[2] + binormal[2]);
	uvs.push_back(point.x - normal[0] + binormal[0]);
	uvs.push_back(point.y - normal[1] + binormal[1]);

	pos.push_back(point0.x - normal0[0] - binormal0[0]);
	pos.push_back(point0.y - normal0[1] - binormal0[1]);
	pos.push_back(point0.z - normal0[2] - binormal0[2]);
	uvs.push_back(point0.x - normal0[0] - binormal0[0]);
	uvs.push_back(point0.y - normal0[1] - binormal0[1]);

	pos.push_back(point.x - normal[0] + binormal[0]);
	pos.push_back(point.y - normal[1] + binormal[1]);
	pos.push_back(point.z - normal[2] + binormal[2]);
	uvs.push_back(point.x - normal[0] + binormal[0]);
	uvs.push_back(point.y - normal[1] + binormal[1]);

	pos.push_back(point.x - normal[0] - binormal[0]);
	pos.push_back(point.y - normal[1] - binormal[1]);
	pos.push_back(point.z - normal[2] - binormal[2]);
	uvs.push_back(point.x - normal[0] - binormal[0]);
	uvs.push_back(point.y - normal[1] - binormal[1]);

	// Left
	pos.push_back(point0.x - normal0[0] - binormal0[0]);
	pos.push_back(point0.y - normal0[1] - binormal0[1]);
	pos.push_back(point0.z - normal0[2] - binormal0[2]);
	uvs.push_back(point0.y - normal0[1] - binormal0[1]);
	uvs.push_back(point0.z - normal0[2] - binormal0[2]);

	pos.push_back(point0.x + normal0[0] - binormal0[0]);
	pos.push_back(point0.y + normal0[1] - binormal0[1]);
	pos.push_back(point0.z + normal0[2] - binormal0[2]);
	uvs.push_back(point0.y + normal0[1] - binormal0[1]);
	uvs.push_back(point0.z + normal0[2] - binormal0[2]);

	pos.push_back(point.x + normal[0] - binormal[0]);
	pos.push_back(point.y + normal[1] - binormal[1]);
	pos.push_back(point.z + normal[2] - binormal[2]);
	uvs.push_back(point.y + normal[1] - binormal[1]);
	uvs.push_back(point.z + normal[2] - binormal[2]);

	pos.push_back(point0.x - normal0[0] - binormal0[0]);
	pos.push_back(point0.y - normal0[1] - binormal0[1]);
	pos.push_back(point0.z - normal0[2] - binormal0[2]);
	uvs.push_back(point0.y - normal0[1] - binormal0[1]);
	uvs.push_back(point0.z - normal0[2] - binormal0[2]);

	pos.push_back(point.x + normal[0] - binormal[0]);
	pos.push_back(point.y + normal[1] - binormal[1]);
	pos.push_back(point.z + normal[2] - binormal[2]);
	uvs.push_back(point.y + normal[1] - binormal[1]);
	uvs.push_back(point.z + normal[2] - binormal[2]);

	pos.push_back(point.x - normal[0] - binormal[0]);
	pos.push_back(point.y - normal[1] - binormal[1]);
	pos.push_back(point.z - normal[2] - binormal[2]);
	uvs.push_back(point.y - normal[1] - binormal[1]);
	uvs.push_back(point.z - normal[2] - binormal[2]);

	// Right
	pos.push_back(point0.x - normal0[0] + binormal0[0]);
	pos.push_back(point0.y - normal0[1] + binormal0[1]);
	pos.push_back(point0.z - normal0[2] + binormal0[2]);
	uvs.push_back(point0.y - normal0[1] + binormal0[1]);
	uvs.push_back(point0.z - normal0[2] + binormal0[2]);

	pos.push_back(point0.x + normal0[0] + binormal0[0]);
	pos.push_back(point0.y + normal0[1] + binormal0[1]);
	pos.push_back(point0.z + normal0[2] + binormal0[2]);
	uvs.push_back(point0.y + normal0[1] + binormal0[1]);
	uvs.push_back(point0.z + normal0[2] + binormal0[2]);

	pos.push_back(point.x + normal[0] + binormal[0]);
	pos.push_back(point.y + normal[1] + binormal[1]);
	pos.push_back(point.z + normal[2] + binormal[2]);
	uvs.push_back(point.y + normal[1] + binormal[1]);
	uvs.push_back(point.z + normal[2] + binormal[2]);

	pos.push_back(point0.x - normal0[0] + binormal0[0]);
	pos.push_back(point0.y - normal0[1] + binormal0[1]);
	pos.push_back(point0.z - normal0[2] + binormal0[2]);
	uvs.push_back(point0.y - normal0[1] + binormal0[1]);
	uvs.push_back(point0.z - normal0[2] + binormal0[2]);

	pos.push_back(point.x + normal[0] + binormal[0]);
	pos.push_back(point.y + normal[1] + binormal[1]);
	pos.push_back(point.z + normal[2] + binormal[2]);
	uvs.push_back(point.y + normal[1] + binormal[1]);
	uvs.push_back(point.z + normal[2] + binormal[2]);

	pos.push_back(point.x - normal[0] + binormal[0]);
	pos.push_back(point.y - normal[1] + binormal[1]);
	pos.push_back(point.z - normal[2] + binormal[2]);
	uvs.push_back(point.y - normal[1] + binormal[1]);
	uvs.push_back(point.z - normal[2] + binormal[2]);
}

void createPlane(vector<float> & pos, vector<float> & uvs,
				 glm::vec3 point, glm::vec3 normal, glm::vec3 binormal) {
	normal = 0.25f * normal;
	binormal = 0.25f * binormal;
	pos.push_back(point.x - normal[0] - binormal[0]);
	pos.push_back(point.y - normal[1] - binormal[1]);
	pos.push_back(point.z - normal[2] - binormal[2]);
	uvs.push_back(point.x - normal[0] - binormal[0]);
	uvs.push_back(point.z - normal[2] - binormal[2]);

	pos.push_back(point.x - normal[0] + binormal[0]);
	pos.push_back(point.y - normal[1] + binormal[1]);
	pos.push_back(point.z - normal[2] + binormal[2]);
	uvs.push_back(point.x - normal[0] + binormal[0]);
	uvs.push_back(point.z - normal[2] + binormal[2]);

	pos.push_back(point.x + normal[0] - binormal[0]);
	pos.push_back(point.y + normal[1] - binormal[1]);
	pos.push_back(point.z + normal[2] - binormal[2]);
	uvs.push_back(point.x + normal[0] - binormal[0]);
	uvs.push_back(point.z + normal[2] - binormal[2]);

	pos.push_back(point.x - normal[0] + binormal[0]);
	pos.push_back(point.y - normal[1] + binormal[1]);
	pos.push_back(point.z - normal[2] + binormal[2]);
	uvs.push_back(point.x - normal[0] + binormal[0]);
	uvs.push_back(point.z - normal[2] + binormal[2]);

	pos.push_back(point.x + normal[0] + binormal[0]);
	pos.push_back(point.y + normal[1] + binormal[1]);
	pos.push_back(point.z + normal[2] + binormal[2]);
	uvs.push_back(point.x + normal[0] + binormal[0]);
	uvs.push_back(point.z + normal[2] + binormal[2]);

	pos.push_back(point.x + normal[0] - binormal[0]);
	pos.push_back(point.y + normal[1] - binormal[1]);
	pos.push_back(point.z + normal[2] - binormal[2]);
	uvs.push_back(point.x + normal[0] - binormal[0]);
	uvs.push_back(point.z + normal[2] - binormal[2]);
}

void initSpline(int & numVertices, vector<float> & pos, vector<float> & uvs)
{
	// Init positions/texture map using splines
	// numVertices = (splines[0].numControlPoints - 1) * 1000 * 2;
	numVertices = 0;
	float s = 0.5f;
	glm::mat4 basis(
		-s, 2 - s, s - 2, s,
		2 * s, s - 3, 3 - 2 * s, -s,
		-s, 0, s, 0,
		0, 1, 0, 0);
	basis = glm::transpose(basis);

	// Initial normal, binormal
	bool splineStart = true;
	glm::vec3 normal0(0, 0, 0);
	glm::vec3 binormal0(0, 0, 0);

	for (int i = 0; i < splines[0].numControlPoints - 1; ++i) {
		// point i-1, point -1 = point 0
		float x1 = (i > 0) ? splines[0].points[i - 1].x : splines[0].points[i].x;
		float y1 = (i > 0) ? splines[0].points[i - 1].y : splines[0].points[i].y;
		float z1 = (i > 0) ? splines[0].points[i - 1].z : splines[0].points[i].z;
		float x2 = splines[0].points[i].x;
		float y2 = splines[0].points[i].y;
		float z2 = splines[0].points[i].z;
		float x3 = splines[0].points[i + 1].x;
		float y3 = splines[0].points[i + 1].y;
		float z3 = splines[0].points[i + 1].z;
		// point i+2, point numControlPoints = point numControlPoints-1
		float x4 = (i + 2 < splines[0].numControlPoints) ? splines[0].points[i + 2].x : splines[0].points[i + 1].x;
		float y4 = (i + 2 < splines[0].numControlPoints) ? splines[0].points[i + 2].y : splines[0].points[i + 1].y;
		float z4 = (i + 2 < splines[0].numControlPoints) ? splines[0].points[i + 2].z : splines[0].points[i + 1].z;
		glm::mat4x3 controlColumn(
			x1, y1, z1,
			x2, y2, z2,
			x3, y3, z3,
			x4, y4, z4);
		glm::mat3x4 control = glm::transpose(controlColumn);

		// Initial point
		glm::vec4 uvecS(pow(0, 3), pow(0, 2), 0, 1);
		glm::vec3 point0 = uvecS * basis * control;

		// Initial tangent, normal, binormal
		glm::vec4 uvecDerivS(3 * pow(0, 3), 2 * 0, 1, 0);
		glm::vec3 tangent0 = glm::normalize(uvecDerivS * basis * control);

		if (splineStart) {
			glm::vec3 seedV(0, 1, 0);
			normal0 = glm::normalize(glm::cross(tangent0, seedV));
			binormal0 = glm::normalize(glm::cross(tangent0, normal0));
			splineStart = false;
		}

		ride.push_back(CameraState(point0, tangent0, normal0));

		// Draw start plane to close rail
		createPlane(pos, uvs, point0 - binormal0, normal0, binormal0);
		createPlane(pos, uvs, point0 + binormal0, normal0, binormal0);
		numVertices += 12;

		if (point0.z > velocity) {
			velocity = point0.z;
		}

		for (float u = 0; u <= 1; u += .001)
		{
			// Calculate the points by stepping u by 0.001
			glm::vec4 uvec(pow(u, 3), pow(u, 2), u, 1);
			glm::vec3 point = uvec * basis * control;

			glm::vec4 uvecDeriv(3 * pow(u, 3), 2 * u, 1, 0);
			glm::vec3 tangent = glm::normalize(uvecDeriv * basis * control);
			glm::vec3 normal = glm::normalize(glm::cross(binormal0, tangent));
			glm::vec3 binormal = glm::normalize(glm::cross(tangent, normal));

			createRailSegment(pos, uvs, point0 - binormal0, normal0, binormal0, point - binormal, normal, binormal);
			createRailSegment(pos, uvs, point0 + binormal0, normal0, binormal0, point + binormal, normal, binormal);

			ride.push_back(CameraState(point, tangent, normal));

			point0 = point;
			normal0 = normal;
			binormal0 = binormal;

			numVertices += 48;

			if (point0.z > velocity) {
				velocity = point0.z;
			}
		}
	}
}

void initGround(int & numVertices, vector<float> & pos, vector<float> & uvs)
{
	float posA[3], posB[3], posC[3], uvA[2], uvB[2], uvC[2];

	posA[0] = -512.0f; posA[1] = -512.0f; posA[2] = -20.0f;
	posB[0] = -512.0f; posB[1] = 512.0f; posB[2] = -20.0f;
	posC[0] = 512.0f; posC[1] = -512.0f; posC[2] = -20.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 0.0f;
	uvC[0] = 0.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);

	posA[0] = 512.0f; posA[1] = -512.0f; posA[2] = -20.0f;
	posB[0] = -512.0f; posB[1] = 512.0f; posB[2] = -20.0f;
	posC[0] = 512.0f; posC[1] = 512.0f; posC[2] = -20.0f;
	uvA[0] = 0.0f; uvA[1] = 2.0f;
	uvB[0] = 2.0f; uvB[1] = 0.0f;
	uvC[0] = 2.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);

	numVertices = 6;
}

void initSky(int & numVertices, vector<float> & pos, vector<float> & uvs)
{
	// Make a cube
	float posA[3], posB[3], posC[3], uvA[2], uvB[2], uvC[2];

	// Top
	posA[0] = -512.0f; posA[1] = -512.0f; posA[2] = 512.0f;
	posB[0] = -512.0f; posB[1] = 512.0f; posB[2] = 512.0f;
	posC[0] = 512.0f; posC[1] = -512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 0.0f;
	uvC[0] = 0.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);
	posA[0] = 512.0f; posA[1] = -512.0f; posA[2] = 512.0f;
	posB[0] = -512.0f; posB[1] = 512.0f; posB[2] = 512.0f;
	posC[0] = 512.0f; posC[1] = 512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 2.0f;
	uvB[0] = 2.0f; uvB[1] = 0.0f;
	uvC[0] = 2.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);

	// Left
	posA[0] = -512.0f; posA[1] = -512.0f; posA[2] = -20.0f;
	posB[0] = -512.0f; posB[1] = 512.0f; posB[2] = -20.0f;
	posC[0] = -512.0f; posC[1] = 512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 0.0f;
	uvC[0] = 2.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);
	posA[0] = -512.0f; posA[1] = -512.0f; posA[2] = -20.0f;
	posB[0] = -512.0f; posB[1] = 512.0f; posB[2] = 512.0f;
	posC[0] = -512.0f; posC[1] = -512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 2.0f;
	uvC[0] = 0.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);

	// Right
	posA[0] = 512.0f; posA[1] = -512.0f; posA[2] = -20.0f;
	posB[0] = 512.0f; posB[1] = 512.0f; posB[2] = -20.0f;
	posC[0] = 512.0f; posC[1] = 512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 0.0f;
	uvC[0] = 2.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);
	posA[0] = 512.0f; posA[1] = -512.0f; posA[2] = -20.0f;
	posB[0] = 512.0f; posB[1] = 512.0f; posB[2] = 512.0f;
	posC[0] = 512.0f; posC[1] = -512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 2.0f;
	uvC[0] = 0.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);

	// Front
	posA[0] = -512.0f; posA[1] = -512.0f; posA[2] = -20.0f;
	posB[0] = 512.0f; posB[1] = -512.0f; posB[2] = -20.0f;
	posC[0] = 512.0f; posC[1] = -512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 0.0f;
	uvC[0] = 2.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);
	posA[0] = -512.0f; posA[1] = -512.0f; posA[2] = -20.0f;
	posB[0] = 512.0f; posB[1] = -512.0f; posB[2] = 512.0f;
	posC[0] = -512.0f; posC[1] = -512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 2.0f;
	uvC[0] = 0.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);

	// Back
	posA[0] = -512.0f; posA[1] = 512.0f; posA[2] = -20.0f;
	posB[0] = 512.0f; posB[1] = 512.0f; posB[2] = -20.0f;
	posC[0] = 512.0f; posC[1] = 512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 0.0f;
	uvC[0] = 2.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);
	posA[0] = -512.0f; posA[1] = 512.0f; posA[2] = -20.0f;
	posB[0] = 512.0f; posB[1] = 512.0f; posB[2] = 512.0f;
	posC[0] = -512.0f; posC[1] = 512.0f; posC[2] = 512.0f;
	uvA[0] = 0.0f; uvA[1] = 0.0f;
	uvB[0] = 2.0f; uvB[1] = 2.0f;
	uvC[0] = 0.0f; uvC[1] = 2.0f;
	addTriangle(pos, uvs, posA, posB, posC, uvA, uvB, uvC);

	numVertices = 30;
}

void initScene(int argc, char *argv[])
{
  // load the splines from the provided filename
  loadSplines(argv[1]);
  printf("Loaded %d spline(s).\n", numSplines);
  for (int i = 0; i < numSplines; i++)
  {
	  printf("Num control points in spline %d: %d.\n", i, splines[i].numControlPoints);
  }

  // init vertex positions and texture mappings
  initSpline(splineNumVertices, splinepos, splineuvs);
  initGround(groundNumVertices, groundpos, grounduvs);
  initSky(skyNumVertices, skypos, skyuvs);

  // init vbos
  initVBO(splineBuffer, splinepos, splineuvs);
  initVBO(groundBuffer, groundpos, grounduvs);
  initVBO(skyBuffer, skypos, skyuvs);

  // init pipeline program
  initPipelineProgram();

  // init vaos
  initVAO(splinevao, splineBuffer, splinepos);
  initVAO(groundvao, groundBuffer, groundpos);
  initVAO(skyvao, skyBuffer, skypos);

  // init textures
  int code = initTexture("textures/metal.jpg", splineTexHandle);
  code = code | initTexture("textures/ground.jpg", groundTexHandle);
  code = code | initTexture("textures/sky.jpg", skyTexHandle);
  if (code != 0)
  {
	  // At least one of the textures failed to load
	  printf("Error loading the texture image.\n");
	  exit(EXIT_FAILURE);
  }

  // init everything else
  recording = false;
  secondFrame = false;
  frameNum = 0;
  rideFrame = 0;
  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
  glEnable(GL_DEPTH_TEST);
  matrix = new OpenGLMatrix();
}

int main(int argc, char *argv[])
{
  if (argc<2)
  {
      printf("usage: %s <trackfile>\n", argv[0]);
	  exit(0);
  }

  cout << "Initializing GLUT..." << endl;
  glutInit(&argc,argv);

  cout << "Initializing OpenGL..." << endl;

  #ifdef __APPLE__
    glutInitDisplayMode(GLUT_3_2_CORE_PROFILE | GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH | GLUT_STENCIL);
  #else
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH | GLUT_STENCIL);
  #endif

  glutInitWindowSize(windowWidth, windowHeight);
  glutInitWindowPosition(0, 0);  
  glutCreateWindow(windowTitle);

  cout << "OpenGL Version: " << glGetString(GL_VERSION) << endl;
  cout << "OpenGL Renderer: " << glGetString(GL_RENDERER) << endl;
  cout << "Shading Language Version: " << glGetString(GL_SHADING_LANGUAGE_VERSION) << endl;

  // tells glut to use a particular display function to redraw 
  glutDisplayFunc(displayFunc);
  // perform animation inside idleFunc
  glutIdleFunc(idleFunc);
  // callback for mouse drags
  glutMotionFunc(mouseMotionDragFunc);
  // callback for idle mouse movement
  glutPassiveMotionFunc(mouseMotionFunc);
  // callback for mouse button changes
  glutMouseFunc(mouseButtonFunc);
  // callback for resizing the window
  glutReshapeFunc(reshapeFunc);
  // callback for pressing the keys on the keyboard
  glutKeyboardFunc(keyboardFunc);

  // init glew
  #ifdef __APPLE__
    // nothing is needed on Apple
  #else
    // Windows, Linux
    GLint result = glewInit();
    if (result != GLEW_OK)
    {
      cout << "error: " << glewGetErrorString(result) << endl;
      exit(EXIT_FAILURE);
    }
  #endif

  // do initialization
  initScene(argc, argv);

  // sink forever into the glut loop
  glutMainLoop();
}


